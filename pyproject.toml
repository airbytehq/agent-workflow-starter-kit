[tool.poetry]
name = "app"
version = "0.1.0"
description = ""
authors = ["Brian Leonard <brian@bleonard.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.scripts]
download_embedding_model = "app.embedding.download_embedding_model:main"

[tool.poetry.dependencies]
python = "3.10.15"
chainlit = "^1.3.2"
openai = "^1.54.4"
gunicorn = "^23.0.0"
fastapi = "^0.115.5"
pydantic = "^2.9.2"
uuid = "^1.30"
llama-index = "^0.12.0"
duckdb = "^1.1.3"
sentence-transformers = "^3.3.1"

[tool.mypy]
python_version = "3.10.15"
strict = true  # Enable strict type checking
exclude = ["venv", ".venv"]

[[tool.mypy.overrides]]
module = "app.chat"
disable_error_code = ["no-untyped-call", "misc"]

[tool.ruff]
target-version = "py310"
exclude = ["alembic", "vendor", "app/llm/pydantic_helpers.py"]
[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.poetry.group.dev.dependencies]
mypy = "^1.13.0"
ruff = "^0.7.4"
pytest-asyncio = "^0.24.0"
pytest = "^8.3.3"
python-dotenv = "^1.0.1"
deepeval = "^1.5.9"
pyvis = "^0.3.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
